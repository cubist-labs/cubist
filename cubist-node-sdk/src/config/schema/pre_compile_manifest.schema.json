{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "PreCompileManifest",
  "description": "Manifest generated by cubist pre-compile.  Contains info about the original as well as generated (shim/interface) contracts. These files are, by default, stored within the contracts directory of each target build (see Path below).\n\nPath: {build_dir}/{target}/contracts/cubist-manifest.json\n\nExample JSON file produced by `cubist pre-compile`:\n\n``` # use cubist_config::PreCompileManifest; # use serde_json::{from_str, json}; # let manifest_json = json!( { \"files\": [ { \"is_shim\": false, \"rel_path\": \"poly.sol\", \"contract_dependencies\": { \"PolyCounter\": [ \"EthCounter\" ] } }, { \"is_shim\": true, \"rel_path\": \"EthCounter.sol\", \"contract_dependencies\": { \"EthCounter\": [] } } ] } # ); # let m: PreCompileManifest = from_str(&manifest_json.to_string()) #                               .unwrap(); ```\n\nThis manifest tells other cubist commands where to find contract files (`poly.sol`) for the target chain and which source files have generated shim contracts (`EthCounter.sol`).\n\nManifests are consumed by all SDKs.",
  "type": "object",
  "required": [
    "files"
  ],
  "properties": {
    "files": {
      "description": "Produced files.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/FileArtifact"
      }
    }
  },
  "additionalProperties": false,
  "definitions": {
    "FileArtifact": {
      "description": "A file produced during the 'pre-compile' step",
      "type": "object",
      "required": [
        "contract_dependencies",
        "is_shim",
        "rel_path"
      ],
      "properties": {
        "contract_dependencies": {
          "description": "Names of contracts defined in this file, each mapped to other contracts (not necessarily defined in this file) which it may call",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "uniqueItems": true
          }
        },
        "is_shim": {
          "description": "Whether this is an auto-generated shim contract or not",
          "type": "boolean"
        },
        "rel_path": {
          "description": "Path relative to the directory of the manifest file",
          "type": "string"
        }
      },
      "additionalProperties": false
    }
  }
}