//! Command line interface for working with Cubist dApps.
//!
//! The `cubist` tool provides commands that fall under one of the following categories:
//! - creating a new Cubist dApp
//! - working with an existing Cubist dApp
//! - managing Cubist background services (e.g., "local chain manager" and "relayer")
//!
//! # Creating a New Cubist dApp
//!
//! The `new` command creates a new Cubist dApp, either empty or from an existing template,
//! targeting one of the 3 currently supported languages: `Rust`, `TypeScript`, or `JavaScript`.
//!
//! To create an empty dApp in Rust, run
//! ```bash
//! cubist new --type Rust my_dapp
//! ```
//!
//! The dApp generated by the previous command contains no contracts, so it cannot readily be built
//! with `cubist`.  Instead of writing some contracts and updating the `cubist-config.json` file
//! manually, try generating a new dApp from one of our templates, for example, the simples one of
//! them called `Storage`:
//! ```bash
//! cubist new --type Rust --template Storage my_storage_dapp
//! ```
//!
//! Next, let's see how to build the `my_storage_dapp` with Cubist.
//!
//! # Working with an Existing Cubist dApp
//!
//! The "one stop shop" command for building your Cubist dApp is called `build`.  Assuming
//! you've already created `my_storage_dapp` from the previous section, to build it, simply
//! invoke `cubist build` from the directory of that dApp:
//! ```bash
//! cd my_storage_app
//! cubist build
//! ```
//!
//! The `build` commands consists of 3 steps (each of which can be invoked individually):
//! 1. `pre-compile`: statically analyzes contracts to determine cross-chain interactions, and
//!                    generates shim contracts to facilitate discovered cross-chain calls.
//! 1. `compile`: invokes a contract compiler (e.g., `solc`) to compile all relevant contracts
//! 1. `gen`: generates strongly typed bindings for all contracts for the target language.
//!
//! Check out the [Cubist SDK](cubist_sdk) docs, in particular the [Background](cubist_sdk#background)
//! and [Example](cubist_sdk#example) sections, for more information about shim contracts, why they
//! are needed, and how Cubist breaks up a multi-chain dApp into multiple single-chain projects
//! before individually compiling them.
//!
//! # Managing Cubist Background Services
//!
//! Before executing our `my_storage_dapp` example, we must first bootstrap the chains that the dApp
//! is configured to run against (see [cubist_config::network] for network configuration details).
//! Cubist comes with a **local chain manager** that can conveniently do that for us.
//!
//! Second, once the chains are up and running, we must start the Cubist **relayer**, which is a
//! background component that carries out all cross-chain updates (by listening for events
//! on one chain and relaying them to their intended destinations).
//!
//! Both of those services can be started at once by running `cubist start` from the directory of
//! the dApp, or individually by running `cubist start chains` and then `cubist start relayer`.
//! Either way, you can use the `--mode <foreground|background>` switch to control how the
//! service(s) should run (with `background` being the default).
//!
//! To see the currently running services, run `cubist status`.
//!
//! To stop all currently running services, run `cubist stop`.
//!
//! Both `status` and `stop` accept switches for specifying more precisely which services to
//! query/stop; see [crate::daemon] for examples.
//!
//! Finally, we can execute `my_storage_dapp` by invoking `cargo run` from its root directory.
//! This dApp deploys two contracts, invokes a method that includes a cross-chain call on one of the
//! contracts, then waits until the effects of that call are propagated (automatically by the relayer
//! running in the background) to the other one.  Check out the [Example](cubist_sdk#example) section
//! of the SDK docs for a more detailed walkthrough.

/// Argument parsing for the CLI.
pub mod cli;
/// Cubist CLI Commands.
pub mod commands;
/// Templates for different examples and languages.
pub mod cube;
/// Management of background cubist services.
pub mod daemon;

mod deployment_watcher;
mod stylist;
